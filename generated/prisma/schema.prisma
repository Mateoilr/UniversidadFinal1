// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Carreras
model Carrera {
  id         Int              @id @default(autoincrement())
  nombre     String
  materias   Materia[] // Relaci√≥n uno a muchos
  matriculas Matricula[]
  Alumno     Alumno[]
  docente    carreradocente[]
}

// Materias
model Materia {
  id            Int           @id @default(autoincrement())
  nombre        String
  carreraId     Int
  carrera       Carrera       @relation(fields: [carreraId], references: [id])
  inscripciones Inscripcion[]
  dictan        Dicta[]
  Alumno        Alumno[]
}

// Estudiantes
model Estudiante {
  id            Int           @id @default(autoincrement())
  nombre        String
  matriculas    Matricula[]
  inscripciones Inscripcion[]
  Alumno        Alumno[]
}

// Docentes
model Docente {
  id             Int              @id @default(autoincrement())
  nombre         String
  dictan         Dicta[]
  carreraDocente carreradocente[]
}

// Matriculas (Estudiantes se matriculan en Carreras)
model Matricula {
  id           Int        @id @default(autoincrement())
  estudianteId Int
  carreraId    Int
  estudiante   Estudiante @relation(fields: [estudianteId], references: [id])
  carrera      Carrera    @relation(fields: [carreraId], references: [id])
}

// Inscripciones (Estudiantes se inscriben a Materias)
model Inscripcion {
  id           Int        @id @default(autoincrement())
  estudianteId Int
  materiaId    Int
  estudiante   Estudiante @relation(fields: [estudianteId], references: [id])
  materia      Materia    @relation(fields: [materiaId], references: [id])
}

// Dictan (Docentes dictan Materias)
model Dicta {
  id        Int     @id @default(autoincrement())
  docenteId Int
  materiaId Int
  docente   Docente @relation(fields: [docenteId], references: [id])
  materia   Materia @relation(fields: [materiaId], references: [id])
}

model Alumno {
  id           Int        @id @default(autoincrement())
  estudianteId Int
  carreraId    Int
  materiaId    Int
  estudiante   Estudiante @relation(fields: [estudianteId], references: [id])
  carrera      Carrera    @relation(fields: [carreraId], references: [id])
  materia      Materia    @relation(fields: [materiaId], references: [id])
}

model carreradocente {
  id        Int     @id @default(autoincrement())
  carreraId Int
  docenteId Int
  carrera   Carrera @relation(fields: [carreraId], references: [id])
  docente   Docente @relation(fields: [docenteId], references: [id])
}

model Usuario {
  id       Int          @id @default(autoincrement())
  email    String       @unique
  password String
  roles    UsuarioRol[] // estudiante | docente | admin
  creadoEn DateTime     @default(now())
}

model Rol {
  id       Int          @id @default(autoincrement())
  nombre   String       @unique
  usuarios UsuarioRol[]
  permisos RolPermiso[]
}

model Permiso {
  id     Int          @id @default(autoincrement())
  nombre String       @unique
  roles  RolPermiso[]
}

model UsuarioRol {
  id        Int     @id @default(autoincrement())
  usuarioId Int
  rolId     Int
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  rol       Rol     @relation(fields: [rolId], references: [id])
}

model RolPermiso {
  id        Int     @id @default(autoincrement())
  rolId     Int
  permisoId Int
  rol       Rol     @relation(fields: [rolId], references: [id])
  permiso   Permiso @relation(fields: [permisoId], references: [id])
}
